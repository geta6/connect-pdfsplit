// Generated by CoffeeScript 1.6.3
module.exports = function(options) {
  var exec, fs, mime, mktemp, path;
  if (options == null) {
    options = {};
  }
  fs = require('fs');
  path = require('path');
  mime = require('mime');
  mktemp = require('mktemp');
  exec = require('child_process').exec;
  options.cache || (options.cache = '/tmp');
  options.density || (options.density = 300);
  return function(req, res, next) {
    var pdfsplit;
    pdfsplit = function(src, page) {
      if (page == null) {
        page = 1;
      }
      if (!fs.existsSync(src)) {
        res.statusCode = 404;
        return res.end();
      }
      src = src.replace(/'/g, "'\\''");
      return exec("pdftk '" + src + "' dumpdata", function(err, stdout) {
        var dst, img, pagemax, stat, tag, tmp;
        pagemax = parseInt(stdout.replace(/^[\s\S]*NumberOfPages: ([0-9]+)[\s\S]*$/, '$1'));
        if (page < 1) {
          page = 1;
        }
        if (page > pagemax) {
          page = pagemax;
        }
        stat = fs.statSync(src);
        tag = "" + stat.dev + "-" + stat.ino + "-" + (stat.mtime.getTime()) + "-" + page + "-" + options.density;
        if (req.headers['if-none-match'] === ("\"" + tag + "\"")) {
          res.statusCode = 304;
          return res.end();
        }
        dst = path.join(options.cache, "" + tag + ".jpg");
        img = new Buffer(fs.existsSync(dst) ? fs.readFileSync(dst) : 0);
        if (0 < img.length) {
          res.statusCode = 200;
          res.setHeader('ETag', "\"" + tag + "\"");
          res.setHeader('Cache-Control', 'public');
          res.setHeader('Content-Type', mime.lookup('jpg'));
          res.setHeader('Content-Length', img.length);
          return res.end(img);
        }
        tmp = mktemp.createFileSync(path.join(options.cache, 'XXXXXX.pdf'));
        return exec("pdftk '" + src + "' cat " + page + " output '" + tmp + "' && convert -define jpeg:density=" + options.density + " -density " + options.density + " '" + tmp + "' '" + dst + "'", function(err) {
          if (fs.existsSync(tmp)) {
            fs.unlinkSync(tmp);
          }
          img = new Buffer(fs.readFileSync(dst));
          if (err) {
            console.error(err, src, page);
            return next();
          }
          res.statusCode = 200;
          res.setHeader('ETag', "\"" + tag + "\"");
          res.setHeader('Cache-Control', 'public');
          res.setHeader('Content-Type', mime.lookup('jpg'));
          res.setHeader('Content-Length', img.length);
          return res.end(img);
        });
      });
    };
    res.pdfsplit = pdfsplit;
    return next();
  };
};
